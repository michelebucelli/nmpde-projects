// This value is used to define the characteristic length of the mesh elements.
// The characteristic length is used to define the size of the mesh elements, so
// if we want a finer mesh, we can decrease this value.
characteristic_length = 1;

// The cube is defined by four points, that will be extruded into a 3D shape.
// The points are defined by their x, y, and z coordinates, and the characteristic length.
// Below, we define the edge size of the cube.
cube_size = 2.0 * 3.14159265358979;

// The points are defined here.
Point(1) = {0.0, 0.0, 0.0, characteristic_length};
Point(2) = {cube_size, 0.0, 0.0, characteristic_length};
Point(3) = {cube_size, cube_size, 0.0, characteristic_length};
Point(4) = {0.0, cube_size, 0.0, characteristic_length};

// Connect the points to form a square.
Line(1) = {1, 2};
Line(2) = {2, 3};
Line(3) = {3, 4};
Line(4) = {4, 1};

// Define the surface of the square, by connecting the lines with a loop.
// Loops are used to define the surface of a shape.
Line Loop(5) = {1, 2, 3, 4};
Plane Surface(6) = {5};

// Extrusion is used to define the 3D shape of the cube, by adding four more points.
tmp[] = Extrude {0.0, 0.0, cube_size} {
  Surface{6};
};

// The term "Physical" is used to define the physical properties of the shape.
// In this case, we are defining the physical volume of the cube.
Physical Volume(1) = tmp[1];

// We're tagging the surfaces of the cube, so we can define boundary conditions
// later on. If you're wondering how I got these numbers, I used gmsh's built-in
// viewer to see the tags of the surfaces.
Physical Surface(1) = {6};
Physical Surface(2) = {15};
Physical Surface(3) = {19};
Physical Surface(4) = {23};
Physical Surface(5) = {27};
Physical Surface(6) = {28};

// This mesh can be generated by running the following command:
// gmsh uncentered-cube.geo -3 && gmsh uncentered-cube.msh

// The -3 flag tells gmsh to generate a 3D mesh, with tetrahedral elements, instead of a 2D surface
// (the shell). 

// The tag order is:
// 1. BOTTOM
// 2. FRONT
// 3. RIGHT
// 4. BACK
// 5. LEFT
// 6. TOP

// Where by "bottom" we mean the face with the lowest z coordinate, and by
// "front" we mean the face with the lowest y coordinate.